// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: microservice.proto

/*
Package test_apilogin_v1alpha1 is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package test_apilogin_v1alpha1

import (
	"context"
	"io"
	"net/http"

	"github.com/golang/protobuf/proto"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/grpc/status"
)

var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray

var (
	filter_TestApilogin_HealthCheck_0 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_TestApilogin_HealthCheck_0(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq grpc_health_v1.HealthCheckRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_TestApilogin_HealthCheck_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.HealthCheck(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_TestApilogin_BaseAuth_0(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BaseAuthRequest
	var metadata runtime.ServerMetadata

	msg, err := client.BaseAuth(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_TestApilogin_JWTAuth_0(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq JWTAuthRequest
	var metadata runtime.ServerMetadata

	msg, err := client.JWTAuth(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_TestApilogin_Demo_0(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DemoRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Demo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

var (
	filter_TestApilogin_Demo_1 = &utilities.DoubleArray{Encoding: map[string]int{}, Base: []int(nil), Check: []int(nil)}
)

func request_TestApilogin_Demo_1(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DemoRequest
	var metadata runtime.ServerMetadata

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_TestApilogin_Demo_1); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Demo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

var (
	filter_TestApilogin_Demo_2 = &utilities.DoubleArray{Encoding: map[string]int{"uuid": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_TestApilogin_Demo_2(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DemoRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["uuid"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "uuid")
	}

	protoReq.Uuid, err = runtime.String(val)

	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "uuid", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_TestApilogin_Demo_2); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Demo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func request_TestApilogin_Demo_3(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DemoRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Ping); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["uuid"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "uuid")
	}

	protoReq.Uuid, err = runtime.String(val)

	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "uuid", err)
	}

	msg, err := client.Demo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

var (
	filter_TestApilogin_Demo_4 = &utilities.DoubleArray{Encoding: map[string]int{"uuid": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_TestApilogin_Demo_4(ctx context.Context, marshaler runtime.Marshaler, client TestApiloginClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DemoRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["uuid"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "uuid")
	}

	protoReq.Uuid, err = runtime.String(val)

	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "uuid", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_TestApilogin_Demo_4); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.Demo(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

// RegisterTestApiloginHandlerFromEndpoint is same as RegisterTestApiloginHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterTestApiloginHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterTestApiloginHandler(ctx, mux, conn)
}

// RegisterTestApiloginHandler registers the http handlers for service TestApilogin to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterTestApiloginHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterTestApiloginHandlerClient(ctx, mux, NewTestApiloginClient(conn))
}

// RegisterTestApiloginHandlerClient registers the http handlers for service TestApilogin
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "TestApiloginClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "TestApiloginClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "TestApiloginClient" to call the correct interceptors.
func RegisterTestApiloginHandlerClient(ctx context.Context, mux *runtime.ServeMux, client TestApiloginClient) error {

	mux.Handle("GET", pattern_TestApilogin_HealthCheck_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_HealthCheck_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_HealthCheck_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_TestApilogin_BaseAuth_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_BaseAuth_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_BaseAuth_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_TestApilogin_JWTAuth_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_JWTAuth_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_JWTAuth_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_TestApilogin_Demo_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_Demo_0(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_Demo_0(ctx, mux, outboundMarshaler, w, req, response_TestApilogin_Demo_0{resp}, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_TestApilogin_Demo_1, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_Demo_1(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_Demo_1(ctx, mux, outboundMarshaler, w, req, response_TestApilogin_Demo_1{resp}, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_TestApilogin_Demo_2, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_Demo_2(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_Demo_2(ctx, mux, outboundMarshaler, w, req, response_TestApilogin_Demo_2{resp}, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_TestApilogin_Demo_3, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_Demo_3(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_Demo_3(ctx, mux, outboundMarshaler, w, req, response_TestApilogin_Demo_3{resp}, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_TestApilogin_Demo_4, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		rctx, err := runtime.AnnotateContext(ctx, mux, req)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_TestApilogin_Demo_4(rctx, inboundMarshaler, client, req, pathParams)
		ctx = runtime.NewServerMetadataContext(ctx, md)
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_TestApilogin_Demo_4(ctx, mux, outboundMarshaler, w, req, response_TestApilogin_Demo_4{resp}, mux.GetForwardResponseOptions()...)

	})

	return nil
}

type response_TestApilogin_Demo_0 struct {
	proto.Message
}

func (m response_TestApilogin_Demo_0) XXX_ResponseBody() interface{} {
	response := m.Message.(*DemoResponse)
	return response.Pong
}

type response_TestApilogin_Demo_1 struct {
	proto.Message
}

func (m response_TestApilogin_Demo_1) XXX_ResponseBody() interface{} {
	response := m.Message.(*DemoResponse)
	return response.Content
}

type response_TestApilogin_Demo_2 struct {
	proto.Message
}

func (m response_TestApilogin_Demo_2) XXX_ResponseBody() interface{} {
	response := m.Message.(*DemoResponse)
	return response.Pong.Pong
}

type response_TestApilogin_Demo_3 struct {
	proto.Message
}

func (m response_TestApilogin_Demo_3) XXX_ResponseBody() interface{} {
	response := m.Message.(*DemoResponse)
	return response.Ping
}

type response_TestApilogin_Demo_4 struct {
	proto.Message
}

func (m response_TestApilogin_Demo_4) XXX_ResponseBody() interface{} {
	response := m.Message.(*DemoResponse)
	return response.Empty
}

var (
	pattern_TestApilogin_HealthCheck_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"healthz"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_TestApilogin_BaseAuth_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"baseauth"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_TestApilogin_JWTAuth_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"jwtauth"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_TestApilogin_Demo_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"demo"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_TestApilogin_Demo_1 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"demo"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_TestApilogin_Demo_2 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1}, []string{"demo", "uuid"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_TestApilogin_Demo_3 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1}, []string{"demo", "uuid"}, "", runtime.AssumeColonVerbOpt(true)))

	pattern_TestApilogin_Demo_4 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1}, []string{"demo", "uuid"}, "", runtime.AssumeColonVerbOpt(true)))
)

var (
	forward_TestApilogin_HealthCheck_0 = runtime.ForwardResponseMessage

	forward_TestApilogin_BaseAuth_0 = runtime.ForwardResponseMessage

	forward_TestApilogin_JWTAuth_0 = runtime.ForwardResponseMessage

	forward_TestApilogin_Demo_0 = runtime.ForwardResponseMessage

	forward_TestApilogin_Demo_1 = runtime.ForwardResponseMessage

	forward_TestApilogin_Demo_2 = runtime.ForwardResponseMessage

	forward_TestApilogin_Demo_3 = runtime.ForwardResponseMessage

	forward_TestApilogin_Demo_4 = runtime.ForwardResponseMessage
)
