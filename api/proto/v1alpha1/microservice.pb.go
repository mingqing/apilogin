// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microservice.proto

package test_apilogin_v1alpha1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("microservice.proto", fileDescriptor_9cc2ddde859f443c) }
func init() { golang_proto.RegisterFile("microservice.proto", fileDescriptor_9cc2ddde859f443c) }

var fileDescriptor_9cc2ddde859f443c = []byte{
	// 1411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0x5d, 0x6c, 0xd3, 0x56,
	0x1b, 0xc7, 0xeb, 0xb6, 0x40, 0x71, 0xcb, 0xcb, 0xfb, 0xfa, 0xe5, 0xe5, 0xd5, 0x72, 0x11, 0x59,
	0x61, 0x5a, 0x27, 0x44, 0x1c, 0x27, 0x6d, 0x0a, 0x8d, 0x84, 0xa6, 0x34, 0xfd, 0x72, 0xd6, 0xa6,
	0x25, 0x75, 0x93, 0xd4, 0x13, 0x17, 0xfe, 0x38, 0x8d, 0x4f, 0xea, 0xd8, 0x9e, 0xed, 0x24, 0xb4,
	0x08, 0x89, 0x32, 0xc6, 0x18, 0xa0, 0x16, 0x75, 0x8c, 0x89, 0xa2, 0x6d, 0x4c, 0x80, 0xd4, 0x5d,
	0x0c, 0x98, 0x34, 0xd6, 0x52, 0x0a, 0x45, 0x68, 0x17, 0x5c, 0x22, 0x71, 0xb3, 0xcb, 0xd1, 0xe6,
	0xab, 0xd2, 0xa4, 0x4a, 0xbb, 0x98, 0x76, 0x39, 0xd9, 0x71, 0xba, 0x02, 0x05, 0x2e, 0x62, 0x9d,
	0xe7, 0x9c, 0xdf, 0x79, 0x9e, 0xf3, 0x7f, 0xce, 0x93, 0xe7, 0xa0, 0x58, 0x1a, 0xf2, 0x9a, 0xa2,
	0x03, 0x2d, 0x0b, 0x79, 0x40, 0xa8, 0x9a, 0x62, 0x28, 0xd8, 0x5e, 0x03, 0xe8, 0x06, 0xc1, 0xaa,
	0x50, 0x52, 0x92, 0x50, 0x26, 0xb2, 0x5e, 0x56, 0x52, 0x45, 0xd6, 0xeb, 0x70, 0x27, 0xa1, 0x21,
	0x66, 0x38, 0x82, 0x57, 0xd2, 0x9e, 0xa4, 0x92, 0x54, 0x3c, 0x16, 0xce, 0x65, 0x46, 0x2d, 0xcb,
	0x32, 0xac, 0x51, 0xc5, 0x8d, 0xa3, 0x6d, 0x33, 0xae, 0xa9, 0xbc, 0xf5, 0x71, 0xdb, 0x98, 0x69,
	0x8b, 0x80, 0x95, 0x0c, 0xd1, 0x93, 0xf5, 0xda, 0x23, 0x7b, 0xdf, 0xe1, 0x17, 0xc2, 0x28, 0x49,
	0x09, 0xb0, 0x2a, 0xd4, 0x5f, 0x1d, 0x7a, 0x58, 0x15, 0x7a, 0x58, 0x59, 0x56, 0x0c, 0xd6, 0x80,
	0x8a, 0xac, 0xdb, 0xdb, 0x87, 0x5e, 0x0a, 0xeb, 0x06, 0xbc, 0xa2, 0x8f, 0xeb, 0x06, 0xb0, 0xcd,
	0x24, 0x6b, 0x80, 0x1c, 0x3b, 0x5e, 0x39, 0x3c, 0xef, 0x4e, 0x02, 0xd9, 0xad, 0xe7, 0xd8, 0x64,
	0x12, 0x68, 0x1e, 0x45, 0xb5, 0x1c, 0x6d, 0xe1, 0x14, 0x15, 0x40, 0xba, 0xaa, 0xab, 0xb1, 0x92,
	0x16, 0xcb, 0xf0, 0xfd, 0xd9, 0x88, 0x36, 0xd1, 0x40, 0x37, 0x82, 0x76, 0xb6, 0xb0, 0xcb, 0xb5,
	0x68, 0x63, 0xaf, 0x25, 0x27, 0x24, 0x02, 0x7e, 0x0c, 0x73, 0x11, 0x66, 0x54, 0xc2, 0x56, 0x98,
	0xf5, 0x12, 0x9b, 0x16, 0xa3, 0xe0, 0xe3, 0x0c, 0xd0, 0x0d, 0xc7, 0xbe, 0x37, 0x32, 0xba, 0xaa,
	0xc8, 0x3a, 0x70, 0x3d, 0x40, 0x66, 0x82, 0xdf, 0x23, 0x68, 0x03, 0x94, 0x0d, 0xa0, 0xc9, 0xac,
	0x84, 0x35, 0x15, 0x26, 0x6f, 0x16, 0x16, 0xe7, 0x8b, 0xd7, 0x4f, 0x16, 0xef, 0x9e, 0x77, 0x4c,
	0x21, 0xe5, 0xdb, 0xf3, 0x85, 0x73, 0xdf, 0x15, 0xce, 0x5e, 0x5b, 0xbb, 0x72, 0x63, 0x7d, 0x69,
	0x12, 0xc5, 0x8b, 0x53, 0x37, 0x0b, 0xd3, 0xd7, 0x8b, 0xd7, 0x96, 0x0a, 0x4b, 0xd3, 0xeb, 0x4b,
	0xb3, 0x76, 0x96, 0x27, 0x3e, 0xb0, 0x6f, 0xfb, 0xf0, 0x2b, 0x37, 0x4c, 0x98, 0x17, 0x8f, 0xe2,
	0xe5, 0xdb, 0xf3, 0xc5, 0x1f, 0x4f, 0x15, 0xcf, 0x5e, 0x2c, 0x9c, 0xfb, 0xb6, 0x7c, 0x6b, 0x79,
	0xed, 0xab, 0x5b, 0xa5, 0x73, 0x3f, 0x17, 0x4f, 0x4e, 0x96, 0xae, 0x4d, 0xfa, 0x48, 0x72, 0x7d,
	0xe9, 0x42, 0x7e, 0xe1, 0x52, 0xe1, 0xcc, 0xa7, 0x85, 0x5b, 0xf7, 0xf2, 0x0b, 0x8b, 0xeb, 0x4b,
	0xb3, 0xc7, 0x5d, 0xba, 0xc1, 0x1a, 0x19, 0xdd, 0x15, 0xc0, 0x5d, 0x43, 0x5d, 0xd1, 0x18, 0x15,
	0xe9, 0x71, 0x9d, 0x38, 0xf5, 0x2c, 0xff, 0x45, 0x2d, 0x8a, 0x35, 0x54, 0xa3, 0x62, 0x8f, 0x11,
	0xb4, 0xa1, 0x83, 0xd5, 0x41, 0x30, 0x63, 0x88, 0x58, 0x33, 0xb1, 0x75, 0x8d, 0x11, 0x55, 0xa2,
	0x9a, 0x9a, 0xf7, 0xdf, 0x0e, 0xda, 0xf9, 0xe1, 0x67, 0x82, 0x03, 0x68, 0xbd, 0x79, 0x4f, 0xd8,
	0xbf, 0x7a, 0x69, 0x7a, 0x10, 0x37, 0x09, 0x3c, 0x38, 0x4c, 0xf7, 0x3a, 0x0e, 0xf2, 0x19, 0x4d,
	0xc2, 0xdd, 0xee, 0x8c, 0x0e, 0x34, 0x5c, 0x04, 0x92, 0xa4, 0x04, 0x72, 0x8a, 0x26, 0x09, 0xb8,
	0x68, 0x18, 0x6a, 0xc0, 0xe3, 0xf1, 0xfa, 0x0e, 0x12, 0x24, 0x41, 0x12, 0xde, 0x80, 0x97, 0x24,
	0x0f, 0x91, 0x1e, 0x8e, 0xd5, 0x01, 0x9b, 0x31, 0x44, 0x4b, 0x43, 0x23, 0xb6, 0x73, 0x63, 0x02,
	0xfb, 0xa5, 0x1e, 0xdd, 0x11, 0x8e, 0xd3, 0x96, 0x86, 0xf7, 0x5e, 0x77, 0x34, 0x1b, 0xa8, 0x4a,
	0x68, 0x7e, 0x2b, 0x67, 0x2b, 0x28, 0xd5, 0xcd, 0x04, 0x9f, 0xd5, 0xd9, 0x1a, 0x76, 0x59, 0x1a,
	0xc2, 0x71, 0xba, 0x22, 0xe1, 0x7e, 0x5d, 0x45, 0x43, 0x2f, 0xde, 0x6c, 0xee, 0x51, 0x34, 0x38,
	0x61, 0x15, 0x68, 0x00, 0xef, 0x00, 0xac, 0x06, 0x34, 0x1c, 0x8c, 0x87, 0x45, 0xae, 0x87, 0x87,
	0x03, 0x30, 0x4c, 0x0d, 0x4f, 0x50, 0xde, 0x08, 0xa4, 0x74, 0x4a, 0x8e, 0xfa, 0xf9, 0x10, 0xd5,
	0x46, 0x8d, 0xa9, 0x89, 0x58, 0x28, 0xdc, 0x4e, 0x98, 0x90, 0x10, 0x3f, 0x62, 0x42, 0x24, 0x93,
	0x88, 0x90, 0x7d, 0xf1, 0x76, 0x51, 0x48, 0x44, 0x95, 0x7e, 0x13, 0x4e, 0xc7, 0x5a, 0x4d, 0x38,
	0x32, 0x41, 0x79, 0x07, 0x3a, 0x83, 0xad, 0x03, 0xf4, 0x48, 0xae, 0x3f, 0x94, 0x83, 0x6c, 0xbc,
	0x9b, 0xa4, 0x52, 0xca, 0xb1, 0x08, 0x9d, 0xf4, 0x46, 0x52, 0x7c, 0x2e, 0xd2, 0x19, 0xcc, 0xf5,
	0x85, 0xc2, 0x2a, 0xdf, 0xd2, 0x6f, 0xfa, 0x51, 0x84, 0xde, 0x68, 0x6e, 0x00, 0x1e, 0xca, 0x8e,
	0xc4, 0x23, 0x29, 0xae, 0x25, 0x96, 0x11, 0x42, 0x7e, 0x09, 0xf4, 0x74, 0x1b, 0x7c, 0xcf, 0x31,
	0xa9, 0x2f, 0x1d, 0xc9, 0x72, 0x43, 0xed, 0xd9, 0x91, 0x44, 0x8c, 0x64, 0x3b, 0x29, 0xd8, 0x17,
	0x0a, 0x4f, 0x08, 0x71, 0x0a, 0x0e, 0x40, 0xea, 0x58, 0x7f, 0x67, 0x30, 0x67, 0xff, 0xcc, 0x79,
	0x89, 0x8b, 0x77, 0xab, 0x9c, 0x79, 0xd8, 0x74, 0x54, 0xe2, 0xe2, 0xed, 0x41, 0x26, 0x21, 0x8a,
	0x5c, 0xa2, 0x43, 0x67, 0x86, 0xfc, 0x29, 0xce, 0x47, 0xfe, 0xc3, 0x74, 0xb7, 0xfb, 0x98, 0x44,
	0x58, 0x65, 0xd2, 0x92, 0xc4, 0x84, 0xa8, 0x36, 0xa1, 0x37, 0xec, 0x65, 0x86, 0x72, 0x90, 0x49,
	0xc7, 0xc6, 0x98, 0x44, 0x58, 0x14, 0x7a, 0x62, 0x63, 0x09, 0x5f, 0x44, 0x1f, 0x89, 0x4b, 0x06,
	0x3f, 0x4e, 0xb5, 0x81, 0xf1, 0x70, 0x8a, 0xf3, 0xf9, 0x33, 0x4c, 0x3c, 0x42, 0x72, 0x2d, 0xe1,
	0x51, 0x76, 0x93, 0x7e, 0x0a, 0xe6, 0xa0, 0x90, 0x88, 0x48, 0xbc, 0xd4, 0xae, 0x32, 0x1b, 0xb1,
	0x0f, 0xc1, 0xd1, 0x04, 0x49, 0xe4, 0xba, 0xa9, 0x91, 0x20, 0x45, 0x89, 0xdd, 0x89, 0xe1, 0xb0,
	0x10, 0xa3, 0xfb, 0xfd, 0xf1, 0xd6, 0x54, 0x30, 0xc1, 0xf7, 0x75, 0xd0, 0xc2, 0x70, 0x5b, 0x36,
	0x2d, 0x0a, 0xb9, 0x9e, 0x54, 0xa7, 0x9b, 0xeb, 0xa2, 0xfd, 0x47, 0x9a, 0x5f, 0x57, 0x48, 0xa9,
	0x9c, 0xb1, 0x51, 0x47, 0xe6, 0x7f, 0xc1, 0xb6, 0xb1, 0x47, 0x75, 0x68, 0x7d, 0xa7, 0x79, 0xcb,
	0xfb, 0x5e, 0x57, 0x1b, 0xe6, 0x6a, 0xb5, 0x80, 0xde, 0x7d, 0x33, 0x64, 0x57, 0xcf, 0xef, 0xb5,
	0x33, 0xc1, 0x3f, 0x10, 0xbb, 0x7a, 0xfe, 0x5f, 0xba, 0xb1, 0x98, 0x7f, 0x78, 0x3e, 0xda, 0x35,
	0x44, 0x8f, 0x66, 0x24, 0x4f, 0x74, 0x30, 0x54, 0x69, 0x06, 0x8e, 0xfb, 0x48, 0x79, 0xf9, 0xca,
	0xda, 0x67, 0x17, 0x0a, 0x93, 0xb3, 0xf9, 0x85, 0x93, 0xf9, 0xc5, 0xab, 0xe5, 0x87, 0x9f, 0xac,
	0x7d, 0xb9, 0x5c, 0x9a, 0x3d, 0x9d, 0x7f, 0xb0, 0x5c, 0xba, 0x34, 0x57, 0x9c, 0x9e, 0x2e, 0x2f,
	0xdf, 0x41, 0x71, 0x2f, 0x81, 0x0f, 0x0e, 0x0c, 0xd1, 0x78, 0xe9, 0xd2, 0x5c, 0x7e, 0x71, 0xaa,
	0x70, 0xf6, 0x6a, 0xe1, 0xfe, 0x62, 0xf9, 0xee, 0xe9, 0xe2, 0xe2, 0xc5, 0xf5, 0xa5, 0x0b, 0x6b,
	0x5f, 0x7f, 0x53, 0xb8, 0x77, 0xaa, 0xf4, 0xc3, 0xe7, 0x28, 0xee, 0x23, 0xf0, 0x9e, 0xae, 0x2a,
	0x56, 0x9e, 0x9a, 0x2f, 0x4c, 0x5f, 0xde, 0xc0, 0xaa, 0x4c, 0x0b, 0x81, 0x0f, 0x0e, 0x57, 0x99,
	0xe2, 0xd5, 0x9f, 0x8a, 0x97, 0xef, 0xbc, 0xc2, 0xb4, 0x12, 0x78, 0x67, 0x57, 0x5f, 0x17, 0xdd,
	0xb5, 0x11, 0xd1, 0x6c, 0x63, 0x2f, 0x61, 0xe1, 0xff, 0xa2, 0x75, 0x3e, 0xb2, 0x15, 0x6b, 0x42,
	0x51, 0x59, 0xc1, 0x79, 0x45, 0x36, 0x80, 0x6c, 0x58, 0xc9, 0x55, 0x5d, 0xdb, 0x3c, 0xa6, 0xf0,
	0x00, 0xb2, 0x9f, 0xf9, 0x37, 0x56, 0x19, 0x73, 0x3b, 0x6c, 0x82, 0x79, 0x07, 0x6b, 0xb2, 0x66,
	0x3c, 0xc7, 0x33, 0x19, 0x28, 0x9c, 0xe0, 0x76, 0xaa, 0x8a, 0x9c, 0x24, 0xcc, 0x0f, 0xe3, 0x70,
	0xbc, 0xb0, 0x14, 0xa8, 0x57, 0xa1, 0x9c, 0xe4, 0xac, 0x2f, 0xf3, 0xbf, 0xfd, 0x2f, 0x6e, 0xdb,
	0x06, 0xd2, 0xaa, 0x31, 0xce, 0xd5, 0x9b, 0x1b, 0x3b, 0x1e, 0xd7, 0xce, 0x04, 0xcf, 0xd4, 0x62,
	0x09, 0x74, 0xef, 0xd6, 0x6d, 0xd4, 0x85, 0xa3, 0x0d, 0xc9, 0xe8, 0x60, 0x08, 0xff, 0x10, 0x1a,
	0xd8, 0x1e, 0xb3, 0x3e, 0xf4, 0x80, 0xa7, 0xf2, 0x02, 0x8d, 0x41, 0xc3, 0x7c, 0x9d, 0xf6, 0xef,
	0x41, 0xb1, 0xa0, 0xca, 0xf2, 0x22, 0xc0, 0xfb, 0x20, 0x0f, 0x64, 0x1d, 0xe0, 0x3e, 0x82, 0xf4,
	0x6d, 0xcf, 0x9a, 0x15, 0x44, 0x3a, 0x9a, 0xb7, 0xf6, 0x6b, 0x96, 0x01, 0xb1, 0xd9, 0x4d, 0xf4,
	0x28, 0x5a, 0xe7, 0x27, 0x49, 0x2c, 0x86, 0xd2, 0xc7, 0x5d, 0xbc, 0x22, 0x00, 0x57, 0x00, 0xf7,
	0x93, 0xe4, 0x01, 0xdc, 0x05, 0x34, 0x4d, 0xd1, 0xcc, 0xa6, 0x5c, 0x7d, 0x32, 0xf0, 0xca, 0xcc,
	0x01, 0xdc, 0x95, 0x06, 0xba, 0xce, 0x26, 0xc1, 0xd6, 0x8b, 0x02, 0x30, 0x58, 0x28, 0x99, 0xed,
	0xfc, 0xa3, 0xa3, 0x27, 0x98, 0xff, 0xa0, 0xbb, 0xd1, 0x9d, 0x1d, 0xac, 0x0e, 0x79, 0xab, 0xeb,
	0xd5, 0x36, 0x20, 0xdc, 0x6e, 0x74, 0xd7, 0xe6, 0xa9, 0x9a, 0x27, 0xcf, 0x9d, 0xc8, 0x5f, 0xcf,
	0x9d, 0xc8, 0xdc, 0x8a, 0x13, 0x59, 0x58, 0x71, 0x22, 0x8f, 0x56, 0x9c, 0xc8, 0x93, 0x15, 0x27,
	0xf2, 0x74, 0xc5, 0x89, 0xfc, 0xb6, 0xe2, 0x44, 0x2e, 0xae, 0x3a, 0x6b, 0xe6, 0x56, 0x9d, 0xc8,
	0xa3, 0x55, 0x27, 0xf2, 0x64, 0xd5, 0x59, 0xf3, 0x74, 0xd5, 0x59, 0xf3, 0xeb, 0xaa, 0xb3, 0x86,
	0xdb, 0x6e, 0x3d, 0xa2, 0x2d, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x18, 0xb7, 0x4d, 0x69, 0x86,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestApiloginClient is the client API for TestApilogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestApiloginClient interface {
	HealthCheck(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error)
	BaseAuth(ctx context.Context, in *BaseAuthRequest, opts ...grpc.CallOption) (*BaseAuthResponse, error)
	JWTAuth(ctx context.Context, in *JWTAuthRequest, opts ...grpc.CallOption) (*JWTAuthResponse, error)
	Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
}

type testApiloginClient struct {
	cc *grpc.ClientConn
}

func NewTestApiloginClient(cc *grpc.ClientConn) TestApiloginClient {
	return &testApiloginClient{cc}
}

func (c *testApiloginClient) HealthCheck(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error) {
	out := new(grpc_health_v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/test.apilogin.v1alpha1.TestApilogin/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testApiloginClient) BaseAuth(ctx context.Context, in *BaseAuthRequest, opts ...grpc.CallOption) (*BaseAuthResponse, error) {
	out := new(BaseAuthResponse)
	err := c.cc.Invoke(ctx, "/test.apilogin.v1alpha1.TestApilogin/BaseAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testApiloginClient) JWTAuth(ctx context.Context, in *JWTAuthRequest, opts ...grpc.CallOption) (*JWTAuthResponse, error) {
	out := new(JWTAuthResponse)
	err := c.cc.Invoke(ctx, "/test.apilogin.v1alpha1.TestApilogin/JWTAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testApiloginClient) Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, "/test.apilogin.v1alpha1.TestApilogin/Demo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestApiloginServer is the server API for TestApilogin service.
type TestApiloginServer interface {
	HealthCheck(context.Context, *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error)
	BaseAuth(context.Context, *BaseAuthRequest) (*BaseAuthResponse, error)
	JWTAuth(context.Context, *JWTAuthRequest) (*JWTAuthResponse, error)
	Demo(context.Context, *DemoRequest) (*DemoResponse, error)
}

// UnimplementedTestApiloginServer can be embedded to have forward compatible implementations.
type UnimplementedTestApiloginServer struct {
}

func (*UnimplementedTestApiloginServer) HealthCheck(ctx context.Context, req *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedTestApiloginServer) BaseAuth(ctx context.Context, req *BaseAuthRequest) (*BaseAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseAuth not implemented")
}
func (*UnimplementedTestApiloginServer) JWTAuth(ctx context.Context, req *JWTAuthRequest) (*JWTAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWTAuth not implemented")
}
func (*UnimplementedTestApiloginServer) Demo(ctx context.Context, req *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}

func RegisterTestApiloginServer(s *grpc.Server, srv TestApiloginServer) {
	s.RegisterService(&_TestApilogin_serviceDesc, srv)
}

func _TestApilogin_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_health_v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiloginServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.apilogin.v1alpha1.TestApilogin/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiloginServer).HealthCheck(ctx, req.(*grpc_health_v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestApilogin_BaseAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiloginServer).BaseAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.apilogin.v1alpha1.TestApilogin/BaseAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiloginServer).BaseAuth(ctx, req.(*BaseAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestApilogin_JWTAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiloginServer).JWTAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.apilogin.v1alpha1.TestApilogin/JWTAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiloginServer).JWTAuth(ctx, req.(*JWTAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestApilogin_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApiloginServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.apilogin.v1alpha1.TestApilogin/Demo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApiloginServer).Demo(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestApilogin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.apilogin.v1alpha1.TestApilogin",
	HandlerType: (*TestApiloginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TestApilogin_HealthCheck_Handler,
		},
		{
			MethodName: "BaseAuth",
			Handler:    _TestApilogin_BaseAuth_Handler,
		},
		{
			MethodName: "JWTAuth",
			Handler:    _TestApilogin_JWTAuth_Handler,
		},
		{
			MethodName: "Demo",
			Handler:    _TestApilogin_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservice.proto",
}
