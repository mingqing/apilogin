// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/mingqing/apilogin/v1/microservice.proto

package apiloginv1

import (
	context "context"
	v1 "github.com/grpc-kit/pkg/api/known/status/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MingqingApiloginClient is the client API for MingqingApilogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MingqingApiloginClient interface {
	HealthCheck(ctx context.Context, in *v1.HealthCheckRequest, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
	Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
}

type mingqingApiloginClient struct {
	cc grpc.ClientConnInterface
}

func NewMingqingApiloginClient(cc grpc.ClientConnInterface) MingqingApiloginClient {
	return &mingqingApiloginClient{cc}
}

func (c *mingqingApiloginClient) HealthCheck(ctx context.Context, in *v1.HealthCheckRequest, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/default.api.mingqing.apilogin.v1.MingqingApilogin/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mingqingApiloginClient) Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, "/default.api.mingqing.apilogin.v1.MingqingApilogin/Demo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MingqingApiloginServer is the server API for MingqingApilogin service.
// All implementations should embed UnimplementedMingqingApiloginServer
// for forward compatibility
type MingqingApiloginServer interface {
	HealthCheck(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)
	Demo(context.Context, *DemoRequest) (*DemoResponse, error)
}

// UnimplementedMingqingApiloginServer should be embedded to have forward compatible implementations.
type UnimplementedMingqingApiloginServer struct {
}

func (UnimplementedMingqingApiloginServer) HealthCheck(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMingqingApiloginServer) Demo(context.Context, *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}

// UnsafeMingqingApiloginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MingqingApiloginServer will
// result in compilation errors.
type UnsafeMingqingApiloginServer interface {
	mustEmbedUnimplementedMingqingApiloginServer()
}

func RegisterMingqingApiloginServer(s grpc.ServiceRegistrar, srv MingqingApiloginServer) {
	s.RegisterService(&MingqingApilogin_ServiceDesc, srv)
}

func _MingqingApilogin_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MingqingApiloginServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/default.api.mingqing.apilogin.v1.MingqingApilogin/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MingqingApiloginServer).HealthCheck(ctx, req.(*v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MingqingApilogin_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MingqingApiloginServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/default.api.mingqing.apilogin.v1.MingqingApilogin/Demo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MingqingApiloginServer).Demo(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MingqingApilogin_ServiceDesc is the grpc.ServiceDesc for MingqingApilogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MingqingApilogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "default.api.mingqing.apilogin.v1.MingqingApilogin",
	HandlerType: (*MingqingApiloginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _MingqingApilogin_HealthCheck_Handler,
		},
		{
			MethodName: "Demo",
			Handler:    _MingqingApilogin_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mingqing/apilogin/v1/microservice.proto",
}
