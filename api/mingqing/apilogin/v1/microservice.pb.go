// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/mingqing/apilogin/v1/microservice.proto

package mingqing_apilogin_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	grpc_health_v1 "google.golang.org/grpc/health/grpc_health_v1"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/mingqing/apilogin/v1/microservice.proto", fileDescriptor_cbb1cc52b8d525af)
}
func init() {
	golang_proto.RegisterFile("api/mingqing/apilogin/v1/microservice.proto", fileDescriptor_cbb1cc52b8d525af)
}

var fileDescriptor_cbb1cc52b8d525af = []byte{
	// 922 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x4d, 0x6c, 0x1b, 0x45,
	0x14, 0x80, 0xbd, 0x4e, 0x02, 0xc9, 0x50, 0xd4, 0xb2, 0x58, 0x42, 0x58, 0x62, 0x35, 0x6c, 0xc5,
	0x25, 0xd4, 0xb3, 0x6b, 0xb7, 0xe5, 0x60, 0xa9, 0x42, 0x6e, 0x6a, 0x95, 0x9f, 0x02, 0x91, 0x93,
	0xf6, 0x60, 0xd4, 0xc3, 0x7a, 0x33, 0x5d, 0xaf, 0x6a, 0xef, 0x6c, 0xbd, 0xe3, 0x54, 0x21, 0x8a,
	0x14, 0x87, 0x00, 0x21, 0x8d, 0xe2, 0x28, 0x84, 0xa2, 0x26, 0x02, 0x82, 0xda, 0x8a, 0x5c, 0x48,
	0x5b, 0x89, 0x92, 0xd4, 0x31, 0x35, 0xc7, 0x1c, 0x8b, 0xb8, 0x70, 0x84, 0xd8, 0xbb, 0xb6, 0x4f,
	0x96, 0xb8, 0x23, 0xa1, 0x5d, 0xef, 0x06, 0xd3, 0x98, 0x5c, 0x46, 0xf3, 0xe6, 0x7d, 0xf3, 0xde,
	0xbc, 0xbf, 0x01, 0xaf, 0x4b, 0xba, 0x2a, 0x64, 0x55, 0x4d, 0xb9, 0xa6, 0x6a, 0x8a, 0x20, 0xe9,
	0x6a, 0x86, 0x28, 0xaa, 0x26, 0x8c, 0x87, 0x85, 0xac, 0x2a, 0xe7, 0x88, 0x81, 0x73, 0xe3, 0xaa,
	0x8c, 0x91, 0x9e, 0x23, 0x94, 0xb0, 0x01, 0x0f, 0x44, 0x1e, 0x88, 0xc6, 0xc3, 0xc1, 0x90, 0xa2,
	0xd2, 0x74, 0x3e, 0x85, 0x64, 0x92, 0x15, 0x14, 0xa2, 0x10, 0xc1, 0x81, 0x53, 0xf9, 0x2b, 0x8e,
	0xe4, 0x08, 0xce, 0xae, 0x6d, 0x24, 0xf8, 0x46, 0x27, 0x9e, 0xd3, 0x65, 0x67, 0x09, 0xb9, 0x98,
	0x2d, 0xa7, 0xb1, 0x94, 0xa1, 0x69, 0xfb, 0x09, 0xed, 0x9d, 0x7b, 0xef, 0xcc, 0x7f, 0xdc, 0x10,
	0x25, 0x83, 0x25, 0x5d, 0x35, 0x0e, 0x6e, 0xed, 0x20, 0x04, 0x49, 0xd3, 0x08, 0x95, 0xa8, 0x4a,
	0x34, 0xc3, 0xbd, 0x3e, 0xf2, 0x94, 0xdb, 0x10, 0x96, 0x89, 0x31, 0x61, 0x50, 0xec, 0x8a, 0x8a,
	0x44, 0xf1, 0x75, 0x69, 0xa2, 0xfd, 0x78, 0x39, 0xa4, 0x60, 0x2d, 0x64, 0x5c, 0x97, 0x14, 0x05,
	0xe7, 0x04, 0xa2, 0x3b, 0x86, 0xba, 0x18, 0x3d, 0xfe, 0xbf, 0xd9, 0x1b, 0xc3, 0x59, 0x37, 0xe0,
	0xc8, 0xdf, 0x7d, 0xe0, 0xd8, 0x7b, 0x2e, 0x13, 0x73, 0x11, 0x76, 0xc5, 0x0f, 0x9e, 0x7b, 0xcb,
	0x09, 0x6f, 0x28, 0x8d, 0xe5, 0xab, 0x2c, 0x8f, 0xec, 0x57, 0x20, 0x37, 0xe2, 0xf1, 0x30, 0xea,
	0x50, 0x26, 0xf0, 0xb5, 0x3c, 0x36, 0x68, 0xf0, 0xf8, 0xa1, 0x8c, 0xa1, 0x13, 0xcd, 0xc0, 0xfc,
	0x0e, 0xb3, 0x1c, 0xfb, 0x9e, 0x01, 0xfd, 0xaa, 0x46, 0x71, 0x4e, 0x93, 0x32, 0xec, 0x11, 0xb3,
	0x70, 0xd7, 0x2c, 0x6d, 0x59, 0xb7, 0xa7, 0xad, 0x87, 0x37, 0x82, 0x0b, 0x4c, 0xe3, 0xde, 0x96,
	0x39, 0xff, 0x9d, 0x39, 0xb7, 0xde, 0xbc, 0x75, 0xa7, 0x55, 0x2e, 0x00, 0x68, 0x2d, 0xde, 0x35,
	0x8b, 0xb7, 0xad, 0xf5, 0xb2, 0x59, 0x2e, 0xb6, 0xca, 0xab, 0x6e, 0xd6, 0x3f, 0x7a, 0xd3, 0xad,
	0xfd, 0x99, 0x8e, 0x5a, 0x23, 0x2f, 0x56, 0x00, 0x1b, 0xf7, 0xb6, 0xac, 0x07, 0x33, 0xd6, 0xdc,
	0x92, 0x39, 0xff, 0x6d, 0x63, 0xb3, 0xd2, 0xfc, 0x6a, 0xb3, 0x3e, 0xff, 0x93, 0x35, 0x5d, 0xa8,
	0xaf, 0x17, 0x22, 0xa2, 0xd8, 0x2a, 0x2f, 0xd4, 0xb6, 0x57, 0xcc, 0x4f, 0x3f, 0x31, 0x37, 0x1f,
	0xd5, 0xb6, 0x4b, 0xad, 0xf2, 0xea, 0x24, 0x6f, 0x50, 0x89, 0xe6, 0x0d, 0x3e, 0x0a, 0xf9, 0x91,
	0x78, 0xe2, 0xd2, 0xdb, 0xef, 0x9f, 0xe7, 0xa7, 0x66, 0x7e, 0xab, 0x7d, 0xe1, 0x07, 0x6c, 0xbf,
	0xe7, 0x93, 0xfd, 0xb5, 0x07, 0xf4, 0x9e, 0xc3, 0x59, 0xc2, 0xbe, 0x8a, 0xba, 0xf5, 0x1a, 0xb2,
	0x75, 0x5e, 0x3a, 0xf8, 0xc3, 0x10, 0x37, 0x1b, 0x85, 0x9e, 0xe5, 0xd8, 0x5f, 0x0c, 0xe8, 0xb5,
	0xcb, 0xc1, 0xbe, 0x54, 0xbf, 0x53, 0xaa, 0x3d, 0xbe, 0x91, 0x88, 0x8f, 0x8c, 0x5e, 0xc9, 0x67,
	0x84, 0xc4, 0xf0, 0x50, 0x3b, 0xf4, 0xe0, 0x0e, 0xd3, 0xa8, 0xdc, 0x6a, 0x7e, 0xb6, 0x60, 0x16,
	0x56, 0x6b, 0xdb, 0xd3, 0xb5, 0xd2, 0x5a, 0xe3, 0xf1, 0xc7, 0xcd, 0x2f, 0x2b, 0xf5, 0xd5, 0xd9,
	0xda, 0xcf, 0x95, 0xfa, 0xca, 0x86, 0x55, 0x2c, 0x36, 0x2a, 0xf7, 0x01, 0x0c, 0x23, 0x38, 0xfc,
	0xc1, 0xc8, 0x28, 0xac, 0xaf, 0x6c, 0xd4, 0x4a, 0x8b, 0xe6, 0xdc, 0x9a, 0xb9, 0x53, 0x6a, 0x3c,
	0x9c, 0xb5, 0x4a, 0x4b, 0xad, 0xf2, 0x42, 0xf3, 0xeb, 0x6f, 0xcc, 0x47, 0x33, 0xf5, 0x1f, 0x3e,
	0x07, 0x30, 0x82, 0xe0, 0xf9, 0xb8, 0x87, 0x35, 0x16, 0xb7, 0xcc, 0xe2, 0xcd, 0x7d, 0xcc, 0x63,
	0x4e, 0x22, 0x38, 0x7c, 0xd1, 0x63, 0xac, 0xb5, 0x1f, 0xad, 0x9b, 0xf7, 0x0f, 0x30, 0xa7, 0x10,
	0x3c, 0x17, 0xbf, 0x10, 0x1f, 0x8d, 0xef, 0x7b, 0xb4, 0x8b, 0xf6, 0x14, 0xf6, 0xce, 0x8b, 0xa0,
	0x27, 0x22, 0x9e, 0x62, 0x8f, 0x00, 0xa0, 0x11, 0x28, 0x13, 0x8d, 0x62, 0x8d, 0x3a, 0x89, 0x9d,
	0x65, 0xf8, 0x01, 0x67, 0x1a, 0xec, 0xe8, 0xa3, 0xcc, 0x60, 0x32, 0xc0, 0xfe, 0x2b, 0xa7, 0x9e,
	0x75, 0xd1, 0xe4, 0x2b, 0xec, 0xb1, 0xfd, 0x53, 0x61, 0x32, 0x9f, 0x57, 0xc7, 0xa6, 0x52, 0x03,
	0x3a, 0xd1, 0x14, 0x64, 0x2f, 0x49, 0x2e, 0x78, 0x40, 0x1d, 0xed, 0xd5, 0x55, 0x4d, 0x49, 0x39,
	0x6b, 0xf2, 0xe5, 0xc1, 0x83, 0xd7, 0xfb, 0x70, 0x56, 0xa7, 0x13, 0xa9, 0x5e, 0xdb, 0xc0, 0xd9,
	0x07, 0xfe, 0xe5, 0x58, 0xc1, 0xcf, 0x5e, 0x04, 0x81, 0x6e, 0x9d, 0xc4, 0x43, 0xd0, 0xaf, 0x24,
	0x86, 0x87, 0xe0, 0xbb, 0x2a, 0x65, 0x03, 0x69, 0x4a, 0x75, 0x23, 0x2a, 0xb4, 0x47, 0xf2, 0xaa,
	0x4a, 0xed, 0x71, 0x1d, 0x0c, 0x00, 0x36, 0xa6, 0x4b, 0x72, 0x1a, 0xc3, 0x0b, 0xaa, 0x8c, 0x35,
	0x03, 0xc3, 0x08, 0x12, 0x23, 0x7d, 0x22, 0x0a, 0x23, 0x31, 0xf8, 0x5a, 0x37, 0xa3, 0x76, 0x43,
	0xa0, 0x4e, 0x1b, 0x89, 0xcb, 0xa0, 0xe7, 0xb4, 0x28, 0xb2, 0x97, 0xc0, 0xe8, 0x24, 0x2f, 0x93,
	0x31, 0xcc, 0x47, 0xe1, 0x69, 0x51, 0x3c, 0x01, 0x79, 0x9c, 0xcb, 0x91, 0x9c, 0xdd, 0x94, 0xde,
	0xc0, 0xc0, 0xf6, 0xc9, 0x09, 0xc8, 0x67, 0xb1, 0x61, 0x48, 0x0a, 0xee, 0xae, 0x1c, 0xc3, 0x54,
	0x52, 0x33, 0x76, 0x3b, 0x7f, 0x78, 0x79, 0x2a, 0xf9, 0x02, 0x38, 0x0a, 0x06, 0xce, 0x4a, 0x86,
	0x2a, 0xc7, 0xf2, 0x34, 0xcd, 0xfa, 0xfb, 0x99, 0xd4, 0x51, 0xf0, 0x7c, 0xe7, 0x91, 0x6f, 0xf7,
	0x4f, 0x8e, 0xd9, 0xd8, 0xe3, 0x98, 0xdd, 0x3d, 0x8e, 0x79, 0xb2, 0xc7, 0x31, 0x7f, 0xec, 0x71,
	0xcc, 0x52, 0x95, 0xf3, 0x6d, 0x54, 0x39, 0xe6, 0x97, 0x2a, 0xc7, 0xec, 0x56, 0x39, 0xdf, 0x93,
	0x2a, 0xe7, 0xfb, 0xbd, 0xca, 0xf9, 0x52, 0xcf, 0x38, 0x5f, 0xc7, 0xc9, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xa9, 0x83, 0x82, 0x06, 0x9f, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MingqingApiloginClient is the client API for MingqingApilogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MingqingApiloginClient interface {
	HealthCheck(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error)
	Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
}

type mingqingApiloginClient struct {
	cc *grpc.ClientConn
}

func NewMingqingApiloginClient(cc *grpc.ClientConn) MingqingApiloginClient {
	return &mingqingApiloginClient{cc}
}

func (c *mingqingApiloginClient) HealthCheck(ctx context.Context, in *grpc_health_v1.HealthCheckRequest, opts ...grpc.CallOption) (*grpc_health_v1.HealthCheckResponse, error) {
	out := new(grpc_health_v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/mingqing.apilogin.v1.MingqingApilogin/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mingqingApiloginClient) Demo(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, "/mingqing.apilogin.v1.MingqingApilogin/Demo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MingqingApiloginServer is the server API for MingqingApilogin service.
type MingqingApiloginServer interface {
	HealthCheck(context.Context, *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error)
	Demo(context.Context, *DemoRequest) (*DemoResponse, error)
}

// UnimplementedMingqingApiloginServer can be embedded to have forward compatible implementations.
type UnimplementedMingqingApiloginServer struct {
}

func (*UnimplementedMingqingApiloginServer) HealthCheck(ctx context.Context, req *grpc_health_v1.HealthCheckRequest) (*grpc_health_v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedMingqingApiloginServer) Demo(ctx context.Context, req *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demo not implemented")
}

func RegisterMingqingApiloginServer(s *grpc.Server, srv MingqingApiloginServer) {
	s.RegisterService(&_MingqingApilogin_serviceDesc, srv)
}

func _MingqingApilogin_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_health_v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MingqingApiloginServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mingqing.apilogin.v1.MingqingApilogin/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MingqingApiloginServer).HealthCheck(ctx, req.(*grpc_health_v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MingqingApilogin_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MingqingApiloginServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mingqing.apilogin.v1.MingqingApilogin/Demo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MingqingApiloginServer).Demo(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MingqingApilogin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mingqing.apilogin.v1.MingqingApilogin",
	HandlerType: (*MingqingApiloginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _MingqingApilogin_HealthCheck_Handler,
		},
		{
			MethodName: "Demo",
			Handler:    _MingqingApilogin_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mingqing/apilogin/v1/microservice.proto",
}
